[{"C:\\Users\\abhi\\Desktop\\etherium\\endproject\\Device\\Device 1\\src\\index.js":"1","C:\\Users\\abhi\\Desktop\\etherium\\endproject\\Device\\Device 1\\src\\App.js":"2"},{"size":505,"mtime":1674982497967,"results":"3","hashOfConfig":"4"},{"size":25300,"mtime":1677162447867,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"h1kph9",{"filePath":"9","messages":"10","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"C:\\Users\\abhi\\Desktop\\etherium\\endproject\\Device\\Device 1\\src\\index.js",[],["12","13"],"C:\\Users\\abhi\\Desktop\\etherium\\endproject\\Device\\Device 1\\src\\App.js",["14","15","16","17","18","19","20","21"],"\nimport './App.css';\nimport mqtt from 'mqtt';\nimport {useCallback, useEffect, useState} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport {Container, Row, Col, ListGroup, ListGroupItem, Form} from 'react-bootstrap';\nimport Card from 'react-bootstrap/Card';\n\nconst elliptic = require('elliptic');\nconst sha3 = require('js-sha3');\nvar ecies = require(\"eciesjs\");\nconst ec = new elliptic.ec('secp256k1');\nvar gateway1_pubKey = '02d3846591c11ef39031b9dd7594de19d2d2f99dd512892e13840b855194432975';\nvar client; //Instance to connect to broker.\nvar sendMsg = \"HELLO\";\nvar bogus_priv = \"e6e1031b9eff10cd5b97a2f6a5ffc1d1d42e2ebd3eef6b050b8400259aaf3de1\";\nvar priv;\n/*******************BGP DEVICE CONFIGURATION*****************/\n\n/*Device interacts with AS node via LBR(low border router) which acts as a gateway**/\n\n/*'encrypt' function to encrypt msg requests**/\n/* It takes two parameters(snd,pubK)\n   >snd and recievers public key(LBR public key in our case)**/\n\nfunction encrypt(snd, pubK){ \n  let cipher = ecies.encrypt(pubK, Buffer.from(JSON.stringify(snd)));\n  //let cipher = ecies.encrypt(pubK, Buffer.from(snd));\n  let cipher_str = cipher.toString('hex');\n  return cipher_str;\n}\n/*'decrypt' function to decrypt responses from LBR*/\n/* It takes two parameters(rcv,prvK)\n   >It's own private key for decrypting*/\n\nfunction decrypt(rcv, prvK){\n  //Uses own private key to decrypt.\n  let cipher_str = rcv.toString();//converts recieved text to string\n  let cipher = Buffer.from(cipher_str,'hex');\n  var rcv_data = ecies.decrypt(prvK, cipher).toString();  \n  rcv_data = JSON.parse(rcv_data);\n  return rcv_data;\n}\n\n/*\n'sign_it' function\nParameters:\n1. prvK - Own private key\n2. Other parameters which are to be concatenated,\nhashed and then signed can be accessed through 'arguments'.\n\n\nReturns the signature object of the form:\n{\n  r:string,\n  s: string,\n  recover paramters: number\n}\n*/\n\nfunction sign_it(prvK){\n  let msg =  \"\";\n  for (let i=1;i<arguments.length;i++)\n    msg += arguments[i];\n  let msgHash = sha3.keccak256(msg);\n  let signature = ec.sign(msgHash, prvK, \"hex\", {canonical: true});\n\n  //The signature below consists of parameters 'r' and 's'.\n  let sign_str = JSON.parse(JSON.stringify(signature));\n  return sign_str;\n}\n\n/**\n'verify' function:\nParameters:\n1. signature - An object same as the type returned by 'sign_it'\n2. pubK - public key to be verified with.\n3. Other parameters which are to be concatenated and hashed can be accessed through 'arguments'.\n\nReturn: Boolean value indicating the authentcation status.\n*/\nfunction verify(signature, pubK){\n  let pubKeyObj = ec.keyFromPublic(pubK,\"hex\");\n\n  let msg =  \"\";\n  for (let i=2;i<arguments.length;i++)\n    msg += arguments[i];\n  let msgHash = sha3.keccak256(msg);\n\n  let auth_status = pubKeyObj.verify(msgHash, signature);\n\n  return auth_status;\n}\n/******************COMPONENT FUNCTION***********************/\nfunction App() {\n\n  /***************INITILIAZING STATES********************/\n  //Set of keys\n  const [keyPair, setKeyPair] = useState({\n    pubKey: null,\n    privKey: null,\n    privKey_0x: null\n  })\n\n  const [toggle, setToggle] = useState(false);\n\n  //This state stores the status of the device.\n  const [status, setStatus] = useState({\n    gen: false, //Whether the keys have been generated.\n    start_btn_clicked: false,\n    connected: false,\n    registered: false,\n    cur_time_stamp: null\n  });\n\n  const [regStatus, setReg] = useState({\n    reg_btn_clicked: false,\n    req: null,\n    ct: null,\n    res: null\n  })\n\n  const [authStatus, setAuth] = useState({\n    auth_btn_clicked: false,\n    ts1:null, //Timestamp when the device is sending the authentication request\n    ct1:null, //Cipher text when sending the request\n    res1: null, //Nonce as cipher text sent by the gateway as response 1\n    res2:null, //Authentication status as a cipher text as response 2 but not yet used\n    data: null, //Nonce (and receivers public key) received from the gateway\n    // data2: null, //Data to be send after receiving the nonce (receiver's public key)\n    // ct2: null, // cipher text for data2\n    res:null //Authentication status as a boolean value\n  })\n\n\n  const [commStatus, setComm] = useState({\n    comm_btn_clicked: false,\n    devID: \"\",\n    res: null, //Whole message sent by gateway as cipher text\n    data: null,  //Decrypted form of Whole message\n    msg: null\n  })\n\n  // const [msg_to_send, setMsg] = useState(\"\");\n\n  useEffect(() => {\n      console.log(\"Key pair changed: \", keyPair);\n  }, [keyPair])\n\n  useEffect(() => {\n    console.log(\"Registration status changed: \", status.registered);\n}, [status.registered])\n\n  // useEffect(() => {\n  //   console.log(\"Comm status has been changed: \", commStatus);\n  // }, [commStatus])\n\n  /***************GENERATE KEYS HANDLER********************/\n  function handleGenerate(){\n    console.log(\"Generating key pair...\");\n\n    //Creating public and private keys for the device.\n    var pair = ec.genKeyPair();\n    priv = pair.getPrivate(\"hex\");\n    // var priv = \"6b5be97bc9065592a6eb9444f90991ca32659673fb7307a44f6948193e7b44bf\";\n    var pub = ec.keyFromPrivate(priv).getPublic(true,\"hex\");\n    // var pub = \"0206fe0109380bb9fb59cfaf24c7db9626a9bed8d1ae3c89e50d2f7671e81ee023\";\n\n     var priv_0x = \"0x\" + priv;\n    \n    var Id = sha3.keccak256(pub+gateway1_pubKey);\n\n    setKeyPair({\n      pubKey: pub,\n      privKey: priv,\n      privKey_0x: priv_0x,\n      devId: Id\n    })\n\n    setStatus((prev) => ({\n      ...prev,\n      gen: true\n    }));\n    let dat = new Date(\"2000-01-01\");\n    localStorage.setItem('cur_time_stamp', dat.toString());\n    localStorage.setItem('old', false);\n    localStorage.setItem('gate', true);\n  }\n\n  /***************CONNECTING AND SUBSCRIBING TO MQTT AND MAIN LOGIC FOR RECEIVING MESSAGES AND REPSONDING********************/\n\n  /***** This handler connects the device to the broker and subscribes to listen for responses *****/\n\n  // function respond_nonce(){\n  //   console.log(\"Wait...\");\n  // }\n\n  function handleStart(){\n    console.log(\"Device start button clicked...\");\n    setStatus((prev) => ({\n      ...prev,\n      start_btn_clicked: true\n    }))\n    client = mqtt.connect('mqtt://test.mosquitto.org:8081', {protocol: 'mqtts'});\n    let data = {\n      privKey: keyPair.privKey\n    }\n    let cipher = ecies.encrypt(gateway1_pubKey, Buffer.from(JSON.stringify(data)));\n    let cipher_str = cipher.toString('hex');\n    client.publish('gateway1/priv',cipher_str);\n    client.on('connect', () => {\n\n      /***************SUBSCRIBE TO DEVICE-ID********************/\n      client.subscribe(keyPair.devId, function (err) {\n        if (!err) {\n          console.log(\"Device started...\");\n          setStatus((prev) => ({\n            ...prev,\n            connected: true\n          }))\n        }\n        else{\n          console.log(\"Error starting the device...\");\n        }\n      });\n\n      /**********MESSAGE LISTENERS**************/\n      client.on('message', (topic, rcv) => {\n          if(topic !== keyPair.devId)\n            return;\n\n          var data = decrypt(rcv, keyPair.privKey_0x);\n          console.log(\"Gateway response received: \", data);\n          // console.log(\"Current time stamp: \", localStorage.getItem('cur_time_stamp'));\n\n          /***********REGISTRATION LISTENER***********/\n          if(data.remark === \"register\")\n          {\n            if(data.status)\n            {\n              console.log(\"Device has been registered...Proceed for authentication!!\");\n              setStatus((prev) => ({\n                ...prev,\n                registered: true\n              }))\n              setReg((prev) => ({\n                ...prev,\n                res: true\n              }))\n            }\n            else\n            {\n              console.log(\"Error registering the device...\");\n            }\n          }\n\n          /***********NONCE LISTENER***********/\n          else if(data.remark === \"nonce\")\n          {\n            if(!data.status)\n            {\n              console.log(\"Device not registered...\");\n              return;\n            }\n            if(data.recvKey){\n              localStorage.setItem('recvKey', data.recvKey);\n              console.log(data.recvKey);\n            }\n            setAuth((prev) => ({\n              ...prev,\n              res1: rcv.toString(),\n              data: data\n            }))\n\n\n            //We have received the nonce (and receivers public key)\n            //1. Check whether the timestamp is new.\n            //2. Check the gateway\n            //3. Hash the contents and sign it\n            //4. Encrypt with gateways public key and send.\n            let d1 = new Date(data.time_stamp);\n            let d2 = new Date(localStorage.getItem('cur_time_stamp'));\n\n            // console.log(\"d1: \", d1.toString(), \"\\nd2: \", d2.toString());\n\n            // 1.\n            // !status.cur_time_stamp\n            if(d1.getTime() > d2.getTime())\n            {\n              \n              // //2.\n              // let pubKeyObj = ec.keyFromPublic(gateway1_pubKey,\"hex\");\n              // let msgHash = sha3.keccak256(data.time_stamp);\n              // // console.log(\"Message hash: \", msgHash);\n              // let auth_status = pubKeyObj.verify(msgHash, data.sign);\n              // console.log('status',auth_status);\n              // if(auth_status)\n              // {\n              //   //3.\n              //   // console.log(\"The text message and receiver public key just before sending: \", localStorage.getItem('msg'), \" \", localStorage.getItem('recvKey'));\n              //   //\n              //   let recvKey = gateway1_pubKey//localStorage.getItem('recvKey');\n              //   //let msg = (localStorage.getItem('msg').length === 0) ? encrypt(\"abcd\", recvKey) : encrypt(localStorage.getItem('msg'), recvKey);\n              //   // bogus_priv*/\n                \n              //   let msg = encrypt(\"HELLO\", recvKey);\n              //   let sign = sign_it(keyPair.privKey, data.nonce);\n              //   let snd = {\n              //   devId: keyPair.devId,\n              //   sign: sign,\n              //   msg: msg\n              //   }\n              //   console.log(\"Sending the message: \", snd);\n              //   let enc_data = encrypt(snd, gateway1_pubKey);\n              //   client.publish('gateway1/auth', enc_data);\n                \n              //   //Update the timestamp state.\n              //   // setStatus((prev) => ({\n              //   //   ...prev,\n              //   //   cur_time_stamp:data.time_stamp\n              //   // }))*/\n              //   setAuth((prev) => ({\n              //     ...prev,\n              //     data2: snd,\n              //     ct2: enc_data,\n              //   }))\n                \n              //   // localStorage.setItem('old', false);\n              //   localStorage.setItem('gate', true);\n              //   localStorage.setItem('cur_time_stamp', data.time_stamp);\n              //   console.log();\n              //   // console.log(\"Current time stamp now: \", localStorage.getItem('cur_time_stamp'));\n              // }\n              // else\n              // {\n              //   console.log(\"Gateway signature verification failed...\");\n              //   setAuth((prev) => ({\n              //     ...prev,\n              //     data2: null,\n              //     ct2: null\n              //   }))\n              //   localStorage.setItem('gate', false);\n              // }\n            }\n            else\n              {\n                console.log(\"Timestamp is old: \");\n                console.log(\"Latest timestamp stored: \", localStorage.getItem('cur_time_stamp'));\n                console.log(\"Received time stamp: \", data.time_stamp);\n                setAuth((prev) => ({\n                  ...prev,\n                  //mycode data2: null,\n                  ct2: null\n                }))\n                // localStorage.setItem('old', true);\n                localStorage.setItem('gate', false);\n              }\n\n          }\n\n          /***********AUTH LISTENER***********/\n          else if(data.remark === \"auth\")\n          {\n            //This is the response from the gateway after processing the request.\n            //1. Check gateway.\n            //2. Check status.\n            let d1 = new Date(data.time_stamp);\n            let d2 = new Date(status.cur_time_stamp);\n            if(!status.cur_time_stamp || d1.getTime() > d2.getTime())\n            {\n              let pubKeyObj = ec.keyFromPublic(gateway1_pubKey,\"hex\");\n              let msgHash = sha3.keccak256(data.time_stamp);\n              let auth_status = pubKeyObj.verify(msgHash, data.sign);\n              console.log(\"heyu\",auth_status);\n              if(auth_status){\n                setAuth((prev) => ({\n                  ...prev,\n                  res:data.status\n                }))\n                console.log(\"Auth status received: \", data.status);\n              }\n              else\n                console.log(\"Gateway signature verification failed...\");\n            }\n            else\n              console.log(\"Timestamp is old...\");\n          }\n          else if(data.remark === \"message\")\n          {\n            let d1 = new Date(data.time_stamp);\n            let d2 = new Date(status.cur_time_stamp);\n            console.log(\"Received a message: \", data.msg);\n            if(d1.getTime() > d2.getTime()){\n              let auth_status = verify(data.sign, gateway1_pubKey, data.time_stamp);\n\n              if(auth_status){\n                setStatus((prev) => ({\n                  ...prev,\n                  cur_time_stamp:data.time_stamp\n                }))\n                setComm((prev) => ({\n                  ...commStatus,\n                  res: rcv.toString(),\n                  data: data,\n                  enc: data.msg,\n                  msg: decrypt(data.msg, keyPair.privKey_0x)\n\n                }))\n              }\n              else{\n                console.log(\"Cannot verify gateway signature...\");\n              }\n\n            }\n            else{\n              console.log(\"Timestamp is old...\");\n            }\n\n          }\n      })\n    });\n  }\n\n\n  /***************DEVICE REGISTRATION HANDLER********************/\n  function handleRegister() {\n    console.log(\"Requesting registration...\");\n    //The devID, PubKey encrypted with gateway public key is sent to the gateway on the topic register1.\n    let d = new Date();\n    let d_str = d.toString();\n    let sign = sign_it(keyPair.privKey, d_str);\n    let data = {\n      devId: keyPair.devId,\n      pubKey: keyPair.pubKey,\n      TS: d_str,\n      sign: sign\n    }\n    let cipher = ecies.encrypt(gateway1_pubKey, Buffer.from(JSON.stringify(data)));\n    console.log(\"YOOO bsby\" + cipher);\n    let cipher_str = cipher.toString('hex');\n    setReg((prev) => ({\n      ...prev,\n      reg_btn_clicked: true,\n      req: data,\n      ct: cipher_str\n    }))\n    client.publish('gateway1/register', cipher_str);\n  }\n\n\n  /***************DEVCE AUTHENTICATION HANDLER********************/\n  function handleAuth(){\n    //Here the device requests the gateway for authentication.\n    //The gateway responds by sending a nonce.\n    console.log(\"Requesting nonce for authentication...\");\n    // console.log(\"commStatus right now: \", commStatus);\n    setAuth((prev) => ({\n      ...prev,\n      auth_btn_clicked: (commStatus.devID.length === 0)\n    }))\n    setComm((prev) => ({\n      ...prev,\n      comm_btn_clicked: (commStatus.devID.length !== 0)\n    }))\n    let d = new Date();\n    let d_str = d.toString();\n    let data = {\n      devId: keyPair.devId,\n      TS: d_str,\n      recvId: (commStatus.devID.length !== 0) ? commStatus.devID: null\n    }\n    let cipher = ecies.encrypt(gateway1_pubKey, Buffer.from(JSON.stringify(data)));\n    let cipher_str = cipher.toString('hex');\n    console.log(cipher_str);\n    setAuth((prev) => ({\n      ...prev,\n      ts1: d_str,\n      ct1:cipher_str\n    }))\n    client.publish('gateway1/nonce', cipher_str);\n  }\n\n\n  function onDevId(e) {\n    setComm((prev) => ({\n      ...prev,\n      devID: e.target.value\n    }))\n  }\n\n  function onMsg(e) {\n    // setMsg((prev) => (e.target.value));\n    localStorage.setItem('msg', e.target.value);\n  }\n\n\n  /************************COMPONENT TO BE RENDERED*****************************/\n  return (\n    <div className=\"App\">\n      <h1 id = \"page_header\">  \"BGP Device\" </h1>\n      <br></br>\n\n      {\n        (status.gen === false) ? <Button id=\"button1\" className = \"btn\" onClick = {handleGenerate}>Keys</Button>\n        : null\n      }\n\n\n      {(keyPair.privKey) ?\n      (\n        <Card className = \"card1\">\n          <Card.Header>Keys</Card.Header>\n          <Card.Body>\n          <p>Device Id: {keyPair.devId}</p>\n          <p>Public key: {keyPair.pubKey}</p>\n          {\n            (toggle) ?\n            <div>\n              <p>Private key: {keyPair.privKey}</p>\n              <Button className = \"btn\" onClick={() => {\n                setToggle(false);\n              }}>\n              Hide\n              </Button>\n            </div>\n            :\n            <Button className = \"btn\" onClick={() => {\n              setToggle(true);\n            }}>\n              Show private key\n            </Button>\n          }\n\n          </Card.Body>\n        </Card>\n      ) :\n      <>\n        {console.log(\"Key pair not generated...\")}\n      </>\n      }\n      <br></br>\n\n        <Button className = \"btn\" id = \"button2\"  onClick={handleStart} >Start the device</Button>\n      { (status.start_btn_clicked) ?\n        <Card className = \"card1\">\n          <Card.Body>\n          {(!status.connected) ?\n            (<p>Connecting to broker...</p>)\n          : (<p>Device ready!</p>)\n          }\n          </Card.Body>\n        </Card>\n        : null\n      }\n\n      <br></br>\n\n      <Button className = \"btn\" id = \"button3\" onClick={handleRegister} >Register</Button>\n      { (regStatus.reg_btn_clicked) ?\n        <Card className = \"card1\">\n          <Card.Body>\n          <p>Requesting registration...</p>\n          <div class = \"card2\">\n            <h5>Device to gateway</h5>\n            <p>Device ID: {keyPair.devId}</p>\n            <p>Public key: {keyPair.pubKey}</p>\n            {\n              (regStatus.req) ?\n              <div>\n                <p>Timestamp of the request: {regStatus.req.TS}</p>\n                <p>Signature (r, s): ( r: {regStatus.req.sign.r.substring(0,40)}, s: {regStatus.req.sign.s.substring(0,40)} )</p>\n              </div>\n              :\n              <p>Signing...</p>\n            }\n            <p>Encrypted request: {(regStatus.ct) ? regStatus.ct.substring(0,40)+\"...\" : null}</p>\n          </div>\n\n          <div class = \"card2\" style={{backgroundColor: '#d9f2de'}}>\n            <h5>Gateway to device</h5>\n            {(status.registered)? <p>Registration status: TRUE</p> :<p>Registration status: FALSE</p> }\n          </div>\n          </Card.Body>\n        </Card>\n        : null\n      }\n\n      <br></br>\n\n      <Button className = \"btn\" id = \"button4\" onClick={handleAuth} disabled={false}>Authenticate</Button>\n      { (authStatus.auth_btn_clicked) ?\n        <Card className = \"card1\">\n          <Card.Body>\n            <p>Starting authentication process</p>\n            <div class = \"card2\">\n              <h5>Request from device to gateway</h5>\n              <p>Device ID: {keyPair.devId}</p>\n              <p>Timestamp of the request: {(authStatus.ts1) ? authStatus.ts1 : null}</p>\n              <p>Cipher text: {(authStatus.ct1) ? authStatus.ct1.substring(0,40) : null}</p>\n            </div>\n\n            <div class = \"card2\">\n              <h5>Gateway response</h5>\n              {\n                  <div>\n                  <p>Received cipher text: {(authStatus.res1) ? authStatus.res1.substring(0,40) : <>Waiting...</>}</p>\n                  <p>After decrypting: </p>\n                  {\n                    (authStatus.data) ?\n                    <div>\n                      <p>Timestamp of the response: {authStatus.data.time_stamp}</p>\n                      <p>Signature (r, s): ( r: {authStatus.data.sign.r.substring(0,40)}, s: {authStatus.data.sign.s.substring(0,40)} )</p>\n                      <div class = \"card2\">\n            {(authStatus.data.nonce)? <p>Authentication successful!!</p> :<p>Authentication failed...</p> }\n          </div>\n                    </div>:\n                    <p>Waiting...</p>\n                  }\n                </div>\n              }\n\n            </div>\n\n          {/* <div class = \"card2\">\n            <h5>Device sending signed and encrypted nonce</h5>\n            <p>Device ID: {keyPair.devId}</p>\n            <p>status :{authStatus.data2}</p>\n            {\n              (authStatus.data2) ?\n              <div>\n                <p>Signing the nonce: {authStatus.data.nonce}</p>\n                <p>Device signature(r, s): ( r: {authStatus.data2.sign.r.substring(0,40)}, s: {authStatus.data2.sign.s.substring(0,40)} )</p>\n              </div>:\n              <p>Preparing response</p>\n            }\n            <p>Cipher text: {(authStatus.ct2) ? authStatus.ct2.substring(0,40) : null}</p>\n          </div> */}\n\n          \n          </Card.Body>\n        </Card>\n        : null\n      }\n      <br></br>\n      <br></br>\n\n\n      <div style={{width:'50%', textAlign:'left', margin:'auto'}}>\n        <Form.Group >\n          <Form.Label>Recipient deviceID: </Form.Label>\n          <Row>\n            <Form.Control type=\"text\" placeholder=\"deviceID\" onChange={onDevId} value={commStatus.devID} style={{width:'80%'}}/>\n          </Row>\n        </Form.Group>\n        <br></br>\n        <Form.Group>\n          <Form.Label>Message</Form.Label>\n          <Row>\n            <Form.Control type=\"text\" placeholder=\"Message to send\" onChange={onMsg} style={{width:'80%'}}/>\n            <Button id = \"button6\" style={{width:'100px'}} onClick={handleAuth} disabled={false}>\n              Send\n            </Button>\n\n          </Row>\n        </Form.Group>\n      </div>\n      <br></br>\n\n\n      { (commStatus.comm_btn_clicked) ?\n        <Card className = \"card1\">\n          <Card.Body>\n          <p>Starting authenticated communication process</p>\n\n          <div class = \"card2\">\n            <h5>Request from device to gateway</h5>\n            <p>Device ID: {keyPair.devId}</p>\n            <p>Timestamp of the request: {(authStatus.ts1) ? authStatus.ts1 : null}</p>\n            <p>Receiver's device id: {(commStatus.devID) ? commStatus.devID : null}</p>\n            <p>Cipher text: {(authStatus.ct1) ? authStatus.ct1.substring(0,40) : null}</p>\n          </div>\n\n          <div class = \"card2\">\n            <h5>Gateway response</h5>\n            <p>Received cipher text: {(authStatus.res1) ? authStatus.res1.substring(0,40) : <>Waiting...</>}</p>\n            <p>After decrypting: </p>\n            {\n              (authStatus.data) ?\n              <div>\n                <p>Timestamp of the response: {authStatus.data.time_stamp}</p>\n                <p>Signature (r, s): ( r: {authStatus.data.sign.r.substring(0,40)}, s: {authStatus.data.sign.s.substring(0,40)} )</p>\n                <p>Nonce received: {authStatus.data.nonce}</p>\n                <p>Receiver public key: {authStatus.data.recvKey}</p>\n              </div>:\n              <p>Waiting...</p>\n            }\n          </div>\n\n          <div class = \"card2\">\n            <h5>Device sending encrypted message with signed nonce</h5>\n            <p>Device ID: {keyPair.devId}</p>\n            {\n              (authStatus.data && authStatus.data2) ?\n              <div>\n                <p>Nonce to be signed: {authStatus.data.nonce}</p>\n                <p>Recipient public key: {authStatus.data.recvKey}</p>\n                <p>Sending sample text message: {authStatus.data2.msg.substring(0,40)+\"...\"}</p>\n                <p>Device signature(r, s): ( r: {authStatus.data2.sign.r.substring(0,40)}, s: {authStatus.data2.sign.s.substring(0,40)} )</p>\n              </div>:\n              <p>Preparing response</p>\n            }\n            <p>Cipher text: {(authStatus.ct2) ? authStatus.ct2.substring(0,40) : null}</p>\n          </div>\n\n          <div style={{backgroundColor: '#d9f2de'}}>\n          {(authStatus.res)? <p>Message sent!!</p> :<p>Sending failed...</p> }\n          </div>\n\n          </Card.Body>\n        </Card>\n        : null\n      }\n\n      <br></br>\n\n\n      { (commStatus.comm_btn_clicked) ?\n      <Card className = \"card1\">\n        <Card.Body>\n          <h5>Messages</h5>\n          <div >\n          <p>Received cipher text: {(commStatus.res) ? commStatus.res.substring(0,40) : <>...</>}</p>\n          <p>After decrypting:</p>\n           {\n             (commStatus.data) ?\n             <div>\n              <p>Timestamp: {commStatus.data.time_stamp}</p>\n              <p>Signature (r, s): ( r: {commStatus.data.sign.r.substring(0,40)}, s: {commStatus.data.sign.s.substring(0,40)} )</p>\n              <p>Received from: {commStatus.data.from}</p>\n              <p>Encrypted message received: {commStatus.enc}</p>\n              <p>Message: {commStatus.msg}</p>\n             </div>\n             : <p>...</p>\n           }\n          </div>\n        </Card.Body>\n      </Card>\n      : null\n    }\n\n\n        <Button id = \"button5\" onClick={() => {\n          console.log(\"Present msg: \", localStorage.getItem('msg'));\n          console.log(\"commStatus: \", commStatus.comm_btn_clicked);\n        }}>Print</Button>\n\n    </div>\n  );\n}\n\nexport default App;",{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","severity":1,"message":"27","line":4,"column":9,"nodeType":"28","messageId":"29","endLine":4,"endColumn":20},{"ruleId":"26","severity":1,"message":"30","line":7,"column":9,"nodeType":"28","messageId":"29","endLine":7,"endColumn":18},{"ruleId":"26","severity":1,"message":"31","line":7,"column":25,"nodeType":"28","messageId":"29","endLine":7,"endColumn":28},{"ruleId":"26","severity":1,"message":"32","line":7,"column":30,"nodeType":"28","messageId":"29","endLine":7,"endColumn":39},{"ruleId":"26","severity":1,"message":"33","line":7,"column":41,"nodeType":"28","messageId":"29","endLine":7,"endColumn":54},{"ruleId":"26","severity":1,"message":"34","line":16,"column":5,"nodeType":"28","messageId":"29","endLine":16,"endColumn":12},{"ruleId":"26","severity":1,"message":"35","line":17,"column":5,"nodeType":"28","messageId":"29","endLine":17,"endColumn":15},{"ruleId":"26","severity":1,"message":"36","line":27,"column":10,"nodeType":"28","messageId":"29","endLine":27,"endColumn":17},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'Container' is defined but never used.","'Col' is defined but never used.","'ListGroup' is defined but never used.","'ListGroupItem' is defined but never used.","'sendMsg' is assigned a value but never used.","'bogus_priv' is assigned a value but never used.","'encrypt' is defined but never used.","no-global-assign","no-unsafe-negation"]